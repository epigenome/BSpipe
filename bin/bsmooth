#!/usr/bin/env Rscript

GrpColors <- c('red', 'blue', 'green3', 'purple', 'orange', 'magenta', 'gold', 'cyan')

Window <- 1000
MinLoci <- 70
MinCov <- 5
MinCpg <- 5
MetDiff <- 0.25
Top <- 20
Width <- 600
Height <- 800
Cutoff <- NULL
Qcutoff <- c(0.025, 0.075)
MaxGap <- 300
MinLength <- 0
PdfFlag = 0
DatCol = 4


suppressMessages(library(getopt))

if (!exists('pars')) pars = commandArgs(trailingOnly = T)
cat('Arguments:', pars, '\n')

if (!exists('InFile') || !exists('OutPre')) {
	if (length(pars) < 3) {
		message("USAGE: Rscript bssmooth.R in_file group_file out_prefix [options]\n")
		quit(save='no', status=-1)
	}

	InFile = pars[1]
	OutPre = pars[2]
	GrpFile= pars[3]
	if (length(pars) > 4) {
		opt = getopt(matrix(ncol=4, byrow=T, c(
		'cov'     ,  'c', 2, 'integer',
		'cpg'     ,  'C', 2, 'integer',
		'diff'    ,  'd', 2, 'numeric',
		'window'  ,  'w', 2, 'integer',
		'loci'    ,  'n', 2, 'integer',
		'length'  ,  'l', 2, 'integer',
		'cutoff'  ,  't', 2, 'numeric',
		'quantile',  'q', 2, 'numeric',
		'gap'     ,  'a', 2, 'integer',
		'pairfile',  'P', 2, 'character',
		'paired'  ,  'p', 2, 'logical',
		'thread'  ,  'm', 1, 'integer',
		'top'     ,  'T', 2, 'integer',
		'width'   ,  'W', 2, 'integer',
		'height'  ,  'H', 2, 'integer',
		'pdf'     ,  'Y', 2, 'logical'
		)), pars[4:length(pars)])
	} else {
		opt = list()
	}
	if (!is.null(opt$cov     )) MinCov    = as.numeric(opt$cov)
	if (!is.null(opt$window  )) Window    = as.numeric(opt$window)
	if (!is.null(opt$loci    )) MinLoci   = as.numeric(opt$loci)
	if (!is.null(opt$diff    )) MetDiff   = as.numeric(opt$diff)
	if (!is.null(opt$length  )) MinLength = as.numeric(opt$length)
	if (!is.null(opt$cpg     )) MinCpg    = as.numeric(opt$cpg)
	if (!is.null(opt$gap     )) MaxGap    = as.numeric(opt$gap)
	if (!is.null(opt$top     )) Top       = as.numeric(opt$top)
	if (!is.null(opt$width   )) Width     = as.numeric(opt$width)
	if (!is.null(opt$height  )) Height    = as.numeric(opt$height)
	if (!is.null(opt$cutoff  )) Cutoff    = c(-abs(as.numeric(opt$cutoff)), abs(as.numeric(opt$cutoff)))
	if (!is.null(opt$quantile)) Qcutoff   = c(as.numeric(opt$quantile), 1-as.numeric(opt$quantile))
	if ( is.null(opt$thread  )) opt$thread = 1
	PdfFlag = !is.null(opt$pdf) && opt$pdf
}

if (substr(OutPre, nchar(OutPre), nchar(OutPre)) == '/') {
	if (!file.exists(OutPre)) dir.create(OutPre)
	OutPre = paste(OutPre, basename(InFile), sep='')
} else if (!file.exists(dirname(OutPre))) {
	dir.create(dirname(OutPre))
}

if (file.exists(OutPre) && file.info(OutPre)$dir) OutPre = paste(OutPre, basename(InFile), sep='/')
OutPre = sub('\\.gz$', '', OutPre)

suppressMessages(library(bsseq))


openGraphics <- function(path, width, height)
{
	flag = F
	if (PdfFlag) flag = T
	if (!flag) { flag = any(grep("\\.pdf$", path)) }

	if (flag)
	{
		if (!any(grep("\\.pdf$", path))) path <- paste(path, ".pdf", sep="")
		pdf(path, w=width/100, h=height/100)
	}
	else
	{
		if (!any(grep("\\.png$", path))) path <- paste(path, ".png", sep="")
		png(path, w=width, h=height)
	}
}

closeGraphics <- function()
{
	graphics.off()
}

loadFile <- function(file, header=T)
{
	print(paste("Loading", file, ".."))
	data <- read.table(file, sep="\t", header=header, check.names=F, comment.char='')
	print(head(data))
	print(tail(data))
	cat("dim=", dim(data), "\n")
	return(data)
}

drawHist <- function(var, file=NA, ...)
{
	if (!is.na(file)) openGraphics(file, 600, 400)
#	r <- range(as.matrix(var))
#	h <- hist(as.matrix(var), breaks=c((r[1]-0.5):(r[2]+0.5)), ...)
	h <- hist(as.matrix(var), breaks=100, ...)
#	print(h$counts)
	if (!is.na(file)) closeGraphics()
}

saveFile <- function(var, file, ...)
{
	write.table(var, file=file, quote = F, sep = "\t", row.names=F, col.names=T)
}


cat("Start: ", date(), "\n")

dat <- loadFile(InFile)
colnames(dat)[1:3] <- c('chr', 'start', 'end')
if (colnames(dat)[DatCol] == paste('Key', DatCol, sep='')) {
	colnames(dat)[DatCol] <- 'ID'
	DatCol = DatCol+1
}

imet <- seq(DatCol+0, length(dat), 2)
itot <- seq(DatCol+1, length(dat), 2)

cat('Change NA to 0 : ', nrow(dat[is.na(dat),]), '\n')
dat[is.na(dat)] = 0


grp <- loadFile(GrpFile, header=F)
if (length(grp) == 4) {
	colnames(grp) = c('file', 'flag', 'sample', 'group')
	grp <- unique(grp[3:4])
} else if (length(grp) == 2) {
	colnames(grp) = c('sample', 'group')
	grp <- unique(grp[1:2])
} else {
	message("Unknown format for a group file")
	q()
}
#	pct.grp <- apply(as.matrix(as.character(grp$sample)), 1, function(x) grp$group[x==colnames(pct)[(DatCol+1):length(pct)]])
pct.grp <- apply(as.matrix(colnames(dat[itot])), 1, function(x) grp$group[x==grp$sample])
print(pct.grp)
stopifnot(length(pct.grp) != 0)
grpColors <- GrpColors[pct.grp]

bs = BSseq(pos=dat[[2]], chr=dat[[1]], M=as.matrix(dat[imet]), Cov=as.matrix(dat[itot]), sampleNames=colnames(dat)[itot])
pData(bs)$Type <- grp$group
pData(bs)$Pair <- grp$sample
pData(bs)$col <- grpColors
stopifnot(validObject(bs))

bs.fit <- BSmooth(bs, ns=MinLoci, h=Window, mc.cores=opt$thread, verbose=T)
openGraphics(paste(OutPre, 'poisson', sep='.'), 500, 400)
plot(poissonGoodnessOfFit(bs.fit))
closeGraphics()
openGraphics(paste(OutPre, 'binomial', sep='.'), 500, 400)
plot(binomialGoodnessOfFit(bs.fit))
closeGraphics()

bs.cov <- getCoverage(bs)
bs.keep <- apply(bs.cov, 1, function(x) sum(x < MinCov) == 0)
cat('Removed Cpgs with read coverage < ', MinCov, ': ', nrow(dat) - sum(bs.keep), '\n')

if (is.null(opt$pairfile)) {
	pairs = t(combn(levels(grp$group), 2))
} else {
	pairs <- loadFile(opt$pairfile, header=F)
}

for (p in 1:nrow(pairs)) {
	path = paste(OutPre, paste(tolower(pairs[p,1]), tolower(pairs[p,2]), sep='-'), sep='.')
	grp1 = as.character(grp$sample[as.character(grp$group)==pairs[p,1]])
	grp2 = as.character(grp$sample[as.character(grp$group)==pairs[p,2]])
	evar = ifelse(length(pairs[p,]) > 2, c('same', 'paired', 'group2')[pairs[p,3]+1], ifelse(!is.null(opt$paired), 'paired', ifelse(!is.null(opt$pairfile), 'group2', 'same')))
	bs.ts <- BSmooth.tstat(bs.fit[bs.keep,], group1=grp1, group2=grp2, estimate.var=evar, local.correct=T, verbose=T)

	tryCatch({
	openGraphics(paste(path, sep='.', 'tstat'), 500, 400)
	plot(bs.ts)
	closeGraphics()},
	error=next)

	path = paste(path, '.', ifelse(!is.null(Cutoff), paste('c', Cutoff[2], sep=''), paste('q', Qcutoff[1], sep='')), paste('g', MaxGap, sep=''), sep='')
	tryCatch(dmr0 <- dmrFinder(bs.ts, cutoff=Cutoff, qcutoff=Qcutoff, maxGap=MaxGap, verbose=T), error=next)
	colnames(dmr0)[ 9] = sub('group1', pairs[p,1], colnames(dmr0)[ 9])
	colnames(dmr0)[10] = sub('group2', pairs[p,2], colnames(dmr0)[10])
	saveFile(dmr0, paste(path, 'csv', sep='.'))
	drawHist(dmr0$n, file=paste(path, 'ncpg', 'hist', sep='.'))
	drawHist(dmr0$width, file=paste(path, 'length', 'hist', sep='.'))
	drawHist(dmr0$meanDiff, file=paste(path, 'diff', 'hist', sep='.'))

	dmrs <- subset(dmr0, n >= MinCpg & abs(meanDiff) > MetDiff & width > MinLength)
	path = paste(path, 'n', MinCpg, 'd', MetDiff, 'w', MinLength, sep='')
	saveFile(dmrs[dmrs$direction=='hyper',], paste(path, 'hyper', 'csv', sep='.'))
	saveFile(dmrs[dmrs$direction=='hypo',], paste(path, 'hypo', 'csv', sep='.'))

	pdf(file=paste(path, 'pdf', sep='.'))
	plotManyRegions(bs.fit, dmrs[1:min(Top, nrow(dmrs)),], extend=1000, addRegions=dmrs)
	closeGraphics()
}

cat("End: ", date(), "\n")
